Для запуска генератора необходимо установить интерпретатор Python версии 3.x и выше
Ссылка для скачивания (Windows): https://www.python.org/ftp/python/3.6.1/python-3.6.1.exe
Установка в linux:
  В терминале ввести: sudo apt-get install python3

Принцип работы генератора данных:
  1. Парсится файл DDL создания таблицы
  2. На основе полученных данных происходит генерация случайных данных в:
      а) Если вторым параметром была указана папка назначения то в файлы записываются в нее
      б) Если папка не была указана, то в текущую директорию, откуда была запущена программа
  3. Формируются столько файлов, сколько указано в параметре COUNT_OUTPUT_FILE,
       соответственно количество строк в каждом файле составляет COUNT_STRINGS / COUNT_OUTPUT_FILE
       Обратите внимание на то, что COUNT_STRINGS должно делиться на COUNT_OUTPUT_FILE без остатка,
       иначе будет сгенерировано меньше строк. Количество сгенерированных строк будет равняться
       COUNT_STRINGS минус остаток от деления
  4. Файлы имеют вид 'data_for_' + переданных файл DDL (без расширения) + '_part_' + порядковый номер (от 0 до N) + OUTPUT_FILE_EXTENSIONS
  5. Если параметр MERGE_ALL_FILE_TO_SINGLE = True, то все файлы с приставкой '_part_' объединяются в один с приставкой _full
        Для объединения файлов в linux используется команда "cat", а в Windows - "type"
  6. Если параметр DEL_ALL_TMP_FILE = True, то все файлы с приставкой '_part_' удаляются

Если в качестве параметра была указана директория с файлами DDL то все вышесказанные действия применяются ко всем файлам из директории последовательно!

Всвязи с такой спецификой объединения файлов, при  MERGE_ALL_FILE_TO_SINGLE = True необходимо в 2-ва раза больше место на диске, т.к. происходит дублирование файлов



Запускать нужно из cmd (либо terminal на linux)
(в linux после установки python, необходимо в терминале прописывать вместо python - python3, т.к. по умолчанию там уже установлен интерпритатор версии 2.x)

Для проверки правильной установки python, необходимо ввести в cmd/terminal

  > python (windows)
  > python3 (linux)

Если не было ошибок то можно запускать генератор
Пример запуска:

1) (генерация для одного файла "ddl_table.sql")
  > python Run_generator.py ddl_table.sql dir_for_data

2) (генерация для всех файлов из папки "path_to_dir_with_ddl_files")
  > python Run_generator.py path_to_dir_with_ddl_files dir_for_data

3) (без указания папки назначения)
  > python Run_generator.py ddl_table.sql

На вход передается до 2-х параметров.

Первый параметр (обязательный):
  Имя файла создания таблицы (с полями и типами)
  Либо путь к папке с несколькими файлами создания таблиц, тогда генерация будет запускаться последовательно для каждого файла из папки

Второй параметр (опциональный):
  Путь к папке в которую необходимо выгружать файлы с сгенерированными данными

В файле modules/Settings.py имеются параметры по умолчанию для настройки генерации данных.
Для изменения какого-либо параметра укажите в файле User_Settings.py имя параметра и его значение.
Все параметры из User_Settings.py временно перезаписывают параметры из Settings.py



Вид DDL создания таблицы должен выглядеть так:
(Регистр не имеет значения)
имя_поля тип_данных null/not null
Например:

CREATE TABLE dbcs_d_azure.characterstrings
(
id integer NOT NULL,
csads char
char1type float(1),
varchar1type float(24),
varchar1type float(25),
varchar209type character varying(209),
varcharTESTtype character varying(209) not null,

)

Парсинг происходит по такому принципу:
  Первое слово до пробела - имя поля (оно должно быть уникальным в пределах одного файла)

  Все что находится после имени поля и до:
      not null
      null
      default
      либо если этих ключевых слов нет, то до конца строки

      Это тип данных для поля

  Если явно указано not null, значит для поля проставляется признак is_nullable = False, иначе is_nullable = True

P.S. конструкции "create table" пропускаются, так же как и пустые строки, либо строки состоящие только из "(" или ")"
Допускается указание "," в конце строки
Так же имеется возможность для опеределенного файла-DDL изменить количество строк. Для этого в файле-DDL необходимо указать COUNT_STRINGS = X, де X - целочисленное значение. Этот параметр влияет только на количество строк одного файла. Параметр COUNT_STRINGS можно прописать на любой строке файла.
Например файл "DDL_table1.sql":

  COUNT_STRINGS = 100
  CREATE TABLE dbcs_d_azure.characterstrings
  (
  id integer NOT NULL,
  csads char
  char1type float(1),
  varchar1type float(24),
  varchar1type float(25),
  varchar209type character varying(209),
  varcharTESTtype character varying(209) not null,

  )


Допустимые типы данных перечислены в файле modules/Settings.py (в конце файла, "Поддерживаемые базовые типы")
Список базовых типов:
  char,
  binary
  date, time, timestamp,
  decimal, double, real,
  tinyint, smallint, integer, bigint
  un_tinyint, un_smallint, un_integer, un_bigint

Обработка происходит только этих типов!

Но, так же можно указать список синонимов для типа в словаре SYNONYMS_DICT (файл modules/Settings.py)
Синонимы указываются в нижнем регистре!
указываются по принципу:
  'ключ': 'значение',
Где "значением" может быть только один из базовых типов.
